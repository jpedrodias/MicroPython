from time import sleep
from json import loads

import gc
gc.enable()

# Connection to NeoPixel
from machine import Pin
from neopixel import NeoPixel
np_size = 7
np_pin = Pin( 16, Pin.OUT)
np = NeoPixel( np_pin, np_size )

# Connection to Internet
from wlan_manager import WLAN_Manager
wlan_client = WLAN_Manager()
wlan_client.start()

# Helper to reconnect 
def reconnect():
  wlan_client.start()
  success = wlan_client.check() and mqtt_client.check()
  if success:
    mqtt_client.broker.subscribe(TOPIC_SUB)
  return success


# Connection to MQTT Broker
from mqtt_manager import MQTT_Manager
mqtt_client = MQTT_Manager()

# MQTT Control
# devices/rp2_e6626005a7936e28/control

def mqtt_callback(topic, msg):
  print('MSG! Topic: {}; Data {}'.format(topic, msg))
  data = {}
  if isinstance(msg, type(b'')):
    msg = msg.decode('utf-8')
    try:
      data = loads(msg)
    except:
      print('Faild to load msg!')
      return False
  
  color = False  
  if 'RGB' in data:
    color = get_rgb_colors(data)  
  else:
    color = get_colors(data)

  if color:
    fill_neopixel(color)
  return True

def fill_neopixel(color, neo_pixel=np):
  neo_pixel.fill(color)
  neo_pixel.write()
  return True

def get_rgb_colors(rgb):
  #{"RGB": '#FF0000'}
  if 'RGB' not in rgb:
    return False
  code = rgb.get('RGB')
  r = int_mod(code[1:3], base=16)
  g = int_mod(code[3:5], base=16)
  b = int_mod(code[5:7], base=16)
  return (r, g, b)
  
def get_colors(rgb):
  #{"R": 10, "G": 0, "B": 0}
  if 'R' not in rgb and 'G' not in rgb and 'B' not in rgb:
      return False
  
  r = int_mod(rgb.get('R'))
  g = int_mod(rgb.get('G'))
  b = int_mod(rgb.get('B'))
  return (r, g, b)

def int_mod(value, base=10, mod=256):
  new_value = 0
  try:
    new_value = int(value, base) % mod
  except:
    pass
  return new_value

# Global variables
TOPIC_SUB = mqtt_client.get_topic("control") # You talking to the sensor
TOPIC_PUB = mqtt_client.get_topic("status")  # The sensor talking to you
chatty_client =  bool(mqtt_client.CONFIG.get("chatty", True))
mqtt_client.broker.set_callback(mqtt_callback)

print( "client_id:", mqtt_client.CONFIG["client_id"] )
print( "MQTT SUB:", TOPIC_SUB)
print( "MQTT PUB:", TOPIC_PUB)

connected = reconnect()
if connected:
  mqtt_client.send("debug", TOPIC_SUB)
  mqtt_client.send("debug", TOPIC_PUB)

# Main Loop
gc.collect()
while True:
    connected = mqtt_client.check_msg()
    if not connected:
        connected = reconnect()
        sleep(1)
        continue
    
    sleep(1)
